# -*- coding: utf-8 -*-
"""WanderMate | Version 2 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E1HqS9wnKG9iX0OuF924wpUUEmhUeanb
"""

# Install dependencies
!pip install geopy folium plotly pandas openai forex-python --quiet

import folium
from geopy.geocoders import Nominatim
import pandas as pd
import plotly.express as px
from forex_python.converter import CurrencyRates
import openai
from datetime import datetime

# 1) USER INPUTS
origin       = input("Origin City (e.g. New Delhi): ").strip()
destination  = input("Destination City, Country (e.g. Paris, France): ").strip()
trip_type    = input("Trip Type (Honeymoon/Solo/Family/Adventure): ").strip()
dep_date     = input("Departure Date (YYYY-MM-DD): ").strip()
ret_date     = input("Return Date (YYYY-MM-DD): ").strip()
budget       = float(input("Total Budget: ").strip())
currency     = input("Currency (USD, INR, EUR, GBP, JPY): ").strip().upper()
taxi_choice  = input("Include taxi from airport? (Yes/No): ").strip().lower() == 'yes'

# 2) Geocode destination and display map
geolocator = Nominatim(user_agent="wandermate_v2")
loc = geolocator.geocode(destination)
m = folium.Map(location=[loc.latitude, loc.longitude], zoom_start=12)
folium.Marker([loc.latitude, loc.longitude], popup=destination).add_to(m)
m.save("destination_map.html")
print("\nMap saved to /mnt/data/destination_map.html. Open it to view your destination.\n")

# 3) MOCK FLIGHT OPTIONS
flights = pd.DataFrame([
    {'From': origin, 'To': destination, 'Airline': 'Air Demo',   'Stops': 'Non-stop', 'Price (USD)': 800, 'Duration': '9h'},
    {'From': origin, 'To': destination, 'Airline': 'FlySample',  'Stops': '1 Stop',   'Price (USD)': 650, 'Duration': '12h'},
    {'From': origin, 'To': destination, 'Airline': 'TestWings', 'Stops': '2 Stops',  'Price (USD)': 580, 'Duration': '15h'},
])
print("Available Flights:\n", flights, "\n")

# 4) MOCK HOTEL OPTIONS
hotels = pd.DataFrame([
    {'Hotel': 'Dream Stay',      'Rating': 4.7, 'Nightly Rate (USD)': 220},
    {'Hotel': 'Comfort Suites',  'Rating': 4.3, 'Nightly Rate (USD)': 180},
    {'Hotel': 'Budget Inn',      'Rating': 4.0, 'Nightly Rate (USD)': 140},
])
print("Hotel Options:\n", hotels, "\n")

# 5) FLIGHT PRICE TREND (7 DAYS)
trend = pd.DataFrame({
    'Date': pd.date_range(start=datetime.today().date(), periods=7),
    'Avg Fare (USD)': [800, 780, 820, 770, 790, 760, 805]
})
fig = px.line(trend, x='Date', y='Avg Fare (USD)', title='7-Day Flight Price Trend')
fig.show()

# 6) CURRENCY CONVERSION
c = CurrencyRates()
try:
    rate = c.get_rate('USD', currency)
except:
    print("Currency conversion failed, defaulting to 1:1")
    rate = 1.0

budget_usd = budget / rate
print(f"Budget in USD: {budget_usd:.2f}")

# 7) BUDGET ESTIMATE
nights = (pd.to_datetime(ret_date) - pd.to_datetime(dep_date)).days
avg_hotel = hotels['Nightly Rate (USD)'].mean() * max(nights,1)
best_flight = flights['Price (USD)'].min()
taxi_cost = 50 if taxi_choice else 0
total_estimate_usd = avg_hotel + best_flight + taxi_cost

print(f"\nEstimated Costs (USD):\n  Flights: {best_flight}\n  Hotels ({nights} nights avg): {avg_hotel:.2f}\n  Taxi: {taxi_cost}\n  Total: {total_estimate_usd:.2f}")
print(f"Remaining Budget (USD): {budget_usd - total_estimate_usd:.2f}")

# 8) AI TRAVEL TIPS
openai.api_key = "YOUR_OPENAI_API_KEY"
response = openai.ChatCompletion.create(
    model="gpt-4",
    messages=[{
        "role": "user",
        "content": f"Provide 3 practical travel tips for a {trip_type} trip to {destination} from {origin}."
    }]
)
tips = response.choices[0].message.content
print("\nTravel Tips:\n", tips)